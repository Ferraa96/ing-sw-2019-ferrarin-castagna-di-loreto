package it.polimi.ingsw.view.Cli;

import it.polimi.ingsw.model.Position;

import java.util.Scanner;

public class ScannerListener extends Thread {
    private Request request = Request.ignore;
    private boolean running = true;
    private final CLIHandler cliHandler;
    private final Scanner scanner;

    public ScannerListener(CLIHandler cliHandler) {
        this.cliHandler = cliHandler;
        scanner = new Scanner(System.in);
    }

    /**
     * listen to user input and send it to the right method of CLI
     */
    @Override
    public void run() {
        while (running) {
            if (scanner.hasNextLine()) {
                switch (request) {
                    case ip:
                        request = Request.ignore;
                        cliHandler.verifyIP(scanner.nextLine());
                        break;
                    case name:
                        request = Request.ignore;
                        if(running) {
                            cliHandler.verifyName(scanner.nextLine());
                        }
                        break;
                    case askReload:
                        request = Request.ignore;
                        if(running) {
                            cliHandler.reloadStateAnswer(scanner.nextLine());
                        }
                        break;
                    case cardList:
                        request = Request.ignore;
                        if(running) {
                            cliHandler.verifyCardList(waitForInt(scanner.nextLine()));
                        }
                        break;
                    case card:
                        request = Request.ignore;
                        if(running) {
                            cliHandler.verifyCard(waitForInt(scanner.nextLine()));
                        }
                        break;
                    case firstPos:
                        request = Request.ignore;
                        if(running) {
                            cliHandler.verifyFirstPos(controlTwoInt(scanner.nextLine()));
                        }
                        break;
                    case worker:
                        request = Request.ignore;
                        if(running) {
                            cliHandler.verifyWorker(controlTwoInt(scanner.nextLine()));
                        }
                        break;
                    case power:
                        request = Request.ignore;
                        if(running) {
                            cliHandler.verifyPower(scanner.nextLine());
                        }
                        break;
                    case position:
                        request = Request.ignore;
                        if(running) {
                            cliHandler.verifyPosition(controlTwoInt(scanner.nextLine()));
                        }
                        break;
                    default:
                        scanner.nextLine();
                }
            }
        }
    }

    /**
     * wait for the input of 2 consecutive numbers
     * @return the position generated by the 2 numbers (raw, column)
     */
    private Position controlTwoInt(String input) {
        int x, y, index;
        for(index = 0; index < input.length(); index++) {
            if(input.charAt(index) == ' ') {
                break;
            }
        }
        if(index == input.length()) {
            return null;
        }
        try {
            x = Integer.parseInt(input.substring(0, index));
            y = Integer.parseInt(input.substring(index + 1));
            return new Position(x - 1, y - 1);
        } catch (NumberFormatException e) {
            return null;
        }
    }

    /**
     * wait for the input of 1 number > 0
     * @return the number
     */
    private int waitForInt(String input) {
        int num;
        try {
            num = Integer.parseInt(input);
            return num;
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    /**
     * set the request to wait for
     * @param request the type of request
     */
    public void setRequest(Request request) {
        this.request = request;
    }

    /**
     * stops the thread
     */
    public void stopReading() {
        running = false;
        interrupt();
    }
}
